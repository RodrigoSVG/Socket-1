# Utiliza√ß√£o do Socket para comunica√ß√£o TCP -  Golang

Esse projeto √© destinado ao desenvolvimento de um socket em Golang, a comunica√ß√£o entre cliente e servidor ser√° realizada atrav√©s de uma conex√£o TCP.

Atrav√©s do socket o cliente pode enviar dados ao servidor (Seno, Coseno, Tangente) para que o mesmo efetue o c√°lculo da √°rea de um tri√¢ngulo qualquer.

## üöÄ Come√ßando

Voc√™ pode consultar as informa√ß√µes abaixo para utilizar o projeto.

Consulte **Instala√ß√£o** para saber como implantar o projeto.

## üì¶ Pr√©-requisitos - Necess√°rios para execu√ß√£o

  - Vers√£o da linguagem Go 1.19.x
  

## üîß Instala√ß√£o

  - Primeiramente √© necess√°rio efetuar a instala√ß√£o da linguagem pelo **[Site](https://go.dev/dl/)**
  - Utilize uma IDE de sua prefer√™ncia para executar os arquivos **servidor.go** e **cliente.go**;
  - Para execua√ß√£o dos arquivos utilize a seguinte sintaxe no terminal: **go run <nomedoarquivo.go>**
  

## ‚öôÔ∏è Executando os testes

  - Execute o arquivo **servidor.go**, voc√™ receber√° a mensagem **"Servidor aguardando conex√µes..."**;
  - Execute o arquivo **cliente.go**, ap√≥s isso voc√™ deve receber a mensagem **"Conex√£o aceita..."** isso indica que a conex√£o est√° funcionando;
  - Executandop os arquivos a mensagem **"Entre com os valores do tri√¢ngulo (Cateto oposto, adjacente e hipotetusa):"** ser√° exibida na tela do cliente;
  - Feito isso voc√™ deve inserir os valores separados por espa√ßo;
  - Ap√≥s isso a conex√£o j√° est√° funcionando e o projeto pode ser executado corretamente;
  
  
## üìã Detalhando o c√≥digo

### - Realizando a conex√£o entre servidor e cliente: 

**servidor.go**

func main() {

	fmt.Println("Servidor aguardando conex√µes...")

	var wg sync.WaitGroup
	chSeno := make(chan string)

	// ouvindo na porta 8081 via protocolo tcp/ip
	ln, erro1 := net.Listen("tcp", ":8081")
	if erro1 != nil {
		fmt.Println(erro1)
	}

	// aceitando conex√µes
	conexao, erro2 := ln.Accept()
	if erro2 != nil {
		fmt.Println(erro2)
		os.Exit(3)
	}

	defer ln.Close()

	fmt.Println("Conex√£o aceita...")


**cliente.go**

    conexao, erro1 := net.Dial("tcp", "127.0.0.1:8081")
       if erro1 != nil {
          fmt.Println(erro1)
          os.Exit(3)
      }
      
      
### - Aqui podemos verificar como o cliente.go captura as entradas sem o \r\n:

   for {
	leitor := bufio.NewReader(os.Stdin)
	fmt.Print("Entre com os valores do tri√¢ngulo (Cateto oposto, adjacente e hipotetusa): ")
	co, err := leitor.ReadString(' ')
	ca, err := leitor.ReadString(' ')
	h, err := leitor.ReadString(' ')
	if err != nil {
		fmt.Println(err)
		os.Exit(3)
	}
	
	
### - Aqui podemos ver como o servidor.go processa a mensagem recebida e efetua o c√°lculo utilizando as Go Rotines:

    for {
	mensagem, erro3 := bufio.NewReader(conexao).ReadString('\n')
	if erro3 != nil {
		fmt.Println(erro3)
		os.Exit(3)
        }
         

      		fmt.Print("Mensagem recebida:", valoresDoTriangulo)

		wg.Add(3)
		go func(wg *sync.WaitGroup) string {
			defer wg.Done()

			// chSeno <- seno(valoresDoTriangulo)
			time.Sleep(1 * time.Second)
			fmt.Println("fim go routine 1...")
			return "chSeno"
		}(&wg)

		go func(wg *sync.WaitGroup) string {
			defer wg.Done()
			// chTangente <- tangente(valoresDoTriangulo)
			fmt.Println("fim go routine 3...")

			return "chTangente"

		}(&wg)

		go func(wg *sync.WaitGroup) string {
			defer wg.Done()
			time.Sleep(3 * time.Second)
			
			
### - Nessa parte o servidor.go devolve o resultado ao cliente.go e o mesmo printa o resultado:

**servidor.go**

  conexao.Write([]byte(string(mensagem + "\r\n")))
  
**cliente.go**
  
  fmt.Println("Resposta do servidor: " + resp)
  
--- 

## üì¶ Implanta√ß√£o

Adicione notas adicionais sobre como implantar isso em um sistema ativo

## üõ†Ô∏è Constru√≠do com

Mencione as ferramentas que voc√™ usou para criar seu projeto

* [Dropwizard](http://www.dropwizard.io/1.0.2/docs/) - O framework web usado
* [Maven](https://maven.apache.org/) - Gerente de Depend√™ncia
* [ROME](https://rometools.github.io/rome/) - Usada para gerar RSS

## üñáÔ∏è Colaborando

Por favor, leia o [COLABORACAO.md](https://gist.github.com/usuario/linkParaInfoSobreContribuicoes) para obter detalhes sobre o nosso c√≥digo de conduta e o processo para nos enviar pedidos de solicita√ß√£o.

## üìå Vers√£o

N√≥s usamos [SemVer](http://semver.org/) para controle de vers√£o. Para as vers√µes dispon√≠veis, observe as [tags neste reposit√≥rio](https://github.com/suas/tags/do/projeto). 

## ‚úíÔ∏è Autores

Mencione todos aqueles que ajudaram a levantar o projeto desde o seu in√≠cio

* **Um desenvolvedor** - *Trabalho Inicial* - [umdesenvolvedor](https://github.com/linkParaPerfil)
* **Fulano De Tal** - *Documenta√ß√£o* - [fulanodetal](https://github.com/linkParaPerfil)

Voc√™ tamb√©m pode ver a lista de todos os [colaboradores](https://github.com/usuario/projeto/colaboradores) que participaram deste projeto.

## üìÑ Licen√ßa

Este projeto est√° sob a licen√ßa (sua licen√ßa) - veja o arquivo [LICENSE.md](https://github.com/usuario/projeto/licenca) para detalhes.

## üéÅ Express√µes de gratid√£o

* Conte a outras pessoas sobre este projeto üì¢;
* Convide algu√©m da equipe para uma cerveja üç∫;
* Um agradecimento publicamente ü´Ç;
* etc.


---
